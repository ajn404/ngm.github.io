"use strict";(self.webpackChunkvue_book=self.webpackChunkvue_book||[]).push([[3500],{49202:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-2a65b3e7",path:"/back_end_start/node.html",title:"学一学node吧",lang:"en-US",frontmatter:{sidebarDepth:10,title:"学一学node吧"},excerpt:"",headers:[{level:2,title:"http模块",slug:"http模块",children:[{level:3,title:"创建http服务器和客户端",slug:"创建http服务器和客户端",children:[]},{level:3,title:"客户端向ttp服务器发送请求",slug:"客户端向ttp服务器发送请求",children:[]}]},{level:2,title:"http2模块",slug:"http2模块",children:[]},{level:2,title:"url模块",slug:"url模块",children:[]}],filePathRelative:"back_end_start/node.md",git:{updatedTime:1647850676e3,contributors:[{name:"mac_ajn404",email:"nhy1423238345@163.com",commits:2},{name:"Ajn404",email:"nhy1423238345@163.com",commits:1}]}}},91964:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(66252);const p=(0,t.uE)('<h1 id="《nodejs-10实战》" tabindex="-1"><a class="header-anchor" href="#《nodejs-10实战》" aria-hidden="true">#</a> 《nodejs 10实战》</h1><h2 id="http模块" tabindex="-1"><a class="header-anchor" href="#http模块" aria-hidden="true">#</a> http模块</h2><h3 id="创建http服务器和客户端" tabindex="-1"><a class="header-anchor" href="#创建http服务器和客户端" aria-hidden="true">#</a> 创建http服务器和客户端</h3><blockquote><p>创建简单的nodejs服务器端</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;Content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text-plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello nodejs&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3010</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;listening port 3010&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>http.createServer()方法返回的是http模块封装的一个基于事件的http服务器。 同样，http.request是其封装的一个http客户端工具，可以用来向http服务器发起请求。 上面的req和res分别是http.IncomingMessage和http.ServerResponse的实例。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">http.Server的事件主要有：</p><ul><li>request：最常用的事件，当客户端请求到来时，该事件被触发，提供req和res两个参数，表示请求和响应信息。</li><li>connection：当TCP连接建立时，该事件被触发，提供一个socket参数，是net.Socket的实例。</li><li>close：当服务器关闭时，触发事件（注意不是在用户断开连接时）。</li></ul></div><blockquote><p>http.createServer其实就是添加了一个request事件监听</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello nodejs&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3030</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;listening in localhost:3030&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',9),e={href:"http://nodejs.cn/api/http/class_http_incomingmessage.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("http.incomingMessage"),c=(0,t.Uk)(" 是HTTP请求的信息，提供3个事件"),l=(0,t.uE)('<ul><li>data</li><li>end</li><li>close</li></ul><p>http.IncomingMessage提供的属性主要有：</p><ul><li>method：HTTP请求的方法，如GET。</li><li>headers：HTTP请求头。</li><li>url：请求路径。</li><li>httpVersion：HTTP协议的版本</li></ul><blockquote><p>融合上述知识</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">+=</span> chunk\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> httpVersion <span class="token operator">=</span> req<span class="token punctuation">.</span>httpVersion<span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> dataHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;data:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> methodHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;method:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> urlHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;url:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> headersHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;headers:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>headers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span>\n        <span class="token keyword">let</span> httpVersionHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;httpVersion:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>httpVersion<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span>\n        <span class="token keyword">let</span> resData \n        <span class="token operator">=</span> dataHTML <span class="token operator">+</span> methodHTML <span class="token operator">+</span> urlHTML <span class="token operator">+</span> headersHTML <span class="token operator">+</span> httpVersionHTML<span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4399</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;来呀，快活呀&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>http.ServerResponse是返回给客户端的信息，其常用的方法为：</p><ul><li>res.writeHead(statusCode,[headers])：向请求的客户端发送响应头。</li><li>res.write(data,[encoding])：向请求发送内容。</li><li>res.end([data],[encoding])：结束请求。</li></ul><h3 id="客户端向ttp服务器发送请求" tabindex="-1"><a class="header-anchor" href="#客户端向ttp服务器发送请求" aria-hidden="true">#</a> 客户端向ttp服务器发送请求</h3><p>以上方法都是http模块在服务器端的使用，接下来看客户端的使用。向http服务器发起请求的方法有：</p><ul><li>http.request(option[,callback])：option为json对象，主要字段有host、port（默认为80）、method（默认为GET）、path（请求的相对于根的路径，默认是“/”）、headers等。该方法返回一个httpClientRequest实例。</li><li>http.get(option[,callback])：http.request()使用HTTP请求方式GET的简便方法。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reqData <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\nhttp<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;host&#39;</span><span class="token operator">:</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;port&#39;</span><span class="token operator">:</span><span class="token string">&#39;3000&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;method&#39;</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        reqData<span class="token operator">+=</span>chunk<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>利用http.get()方法也可以实现同样的效果</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>File not found</code></pre><div class="line-numbers"></div></div><blockquote><p>与服务端一样，http.request()和http.get()方法返回的是一个http.ClientRequest()实例。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">http.ClientRequest()类主要的事件和方法有：</p><ul><li>response：当接收到响应时触发。</li><li>request.write(chunk[,encoding][,callback])：发送请求数据。</li><li>res.end([data][,encoding][,callback])：发送请求完毕，应该始终指定这个方法。</li></ul></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reqData <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;host&#39;</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;port&#39;</span><span class="token operator">:</span> <span class="token string">&#39;3000&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>\nreq<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;response&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        reqData <span class="token operator">+=</span> chunk\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nÍ\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="http2模块" tabindex="-1"><a class="header-anchor" href="#http2模块" aria-hidden="true">#</a> http2模块</h2><h2 id="url模块" tabindex="-1"><a class="header-anchor" href="#url模块" aria-hidden="true">#</a> url模块</h2><blockquote><p>使用url模块只需要在文件中通过require(&#39;url&#39;)引入即可。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">url模块是一个分析、解析url的模块，主要提供以下三种方法：</p><ul><li>url.parse(urlStr[,parseQueryString][,slashesDenoteHost])：解析一个url地址，返回一个url对象。</li><li>url.format(urlObj)：接收一个url对象为参数，返回一个完整的url地址。</li><li>url.resolve(from, to)：接收一个base url对象和一个href url对象，像浏览器那样解析，返回一个完整地址。</li></ul></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> parseUrl <span class="token operator">=</span> <span class="token string">&#39;http://nodejs.cn/api/url.html#class-url&#39;</span>\n\n<span class="token keyword">let</span> urlObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>parseUrl<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',21),u={},r=(0,a(83744).Z)(u,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)]),c]),l],64)}]])},83744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);