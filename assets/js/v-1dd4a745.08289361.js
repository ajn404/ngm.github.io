"use strict";(self.webpackChunkvue_book=self.webpackChunkvue_book||[]).push([[3918],{58049:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1dd4a745",path:"/back_end_start/rust.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"why rust",slug:"why-rust",children:[]},{level:2,title:"technical rust goodies",slug:"technical-rust-goodies",children:[]},{level:2,title:"基础数据类型",slug:"基础数据类型",children:[]},{level:2,title:"functions",slug:"functions",children:[]},{level:2,title:"println macro",slug:"println-macro",children:[]},{level:2,title:'control flow using "if"',slug:"control-flow-using-if",children:[]},{level:2,title:"repetition using loops",slug:"repetition-using-loops",children:[]},{level:2,title:"tool install",slug:"tool-install",children:[]},{level:2,title:"match",slug:"match",children:[]},{level:2,title:"loop",slug:"loop",children:[]},{level:2,title:"while",slug:"while",children:[]},{level:2,title:"work with data",slug:"work-with-data",children:[]}],filePathRelative:"back_end_start/rust.md",git:{updatedTime:1658799517e3,contributors:[{name:"mac_ajn404",email:"nhy1423238345@163.com",commits:2}]}}},27845:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">curl</span> --proto <span class="token string">&#39;=https&#39;</span> --tlsv1.2 https://sh.rustup.rs -sSf <span class="token operator">|</span> <span class="token function">sh</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rustup update\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rustc --version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>cargo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="why-rust" tabindex="-1"><a class="header-anchor" href="#why-rust" aria-hidden="true">#</a> why rust</h2><h2 id="technical-rust-goodies" tabindex="-1"><a class="header-anchor" href="#technical-rust-goodies" aria-hidden="true">#</a> technical rust goodies</h2><h2 id="基础数据类型" tabindex="-1"><a class="header-anchor" href="#基础数据类型" aria-hidden="true">#</a> 基础数据类型</h2><ul><li>布尔值</li><li>整型</li><li>Double/Float</li><li>Character 单引号</li><li>String 双引号</li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> my_name <span class="token operator">=</span> <span class="token string">&quot;BILL&quot;</span>\nmy_name <span class="token operator">=</span> <span class="token string">&quot;JACK&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> functions</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">{</span>\n    a<span class="token operator">+</span>b\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="println-macro" tabindex="-1"><a class="header-anchor" href="#println-macro" aria-hidden="true">#</a> println macro</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>\n<span class="token keyword">let</span> life <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?} {:?}&quot;</span><span class="token punctuation">,</span>life<span class="token punctuation">,</span>life<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="control-flow-using-if" tabindex="-1"><a class="header-anchor" href="#control-flow-using-if" aria-hidden="true">#</a> control flow using &quot;if&quot;</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> a<span class="token operator">&gt;</span><span class="token number">99</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Big number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;small number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="repetition-using-loops" tabindex="-1"><a class="header-anchor" href="#repetition-using-loops" aria-hidden="true">#</a> repetition using loops</h2><p>infinite loop</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> \n<span class="token keyword">loop</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token operator">=</span><span class="token number">5</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>while loop</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token macro property">a!</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="tool-install" tabindex="-1"><a class="header-anchor" href="#tool-install" aria-hidden="true">#</a> tool install</h2><ul><li>rustup</li><li>vscode</li><li>rustup toolchain install stable</li><li>cargo</li></ul><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> some_bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">match</span> some_bool <span class="token punctuation">{</span>\n        <span class="token boolean">true</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token boolean">false</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> some_bool <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">match</span> some_bool <span class="token punctuation">{</span>\n        <span class="token char">&#39;A&#39;</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token char">&#39;B&#39;</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;else&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> loop</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">loop</span><span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>\n        x <span class="token operator">=</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> i<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        i <span class="token operator">=</span> i <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="work-with-data" tabindex="-1"><a class="header-anchor" href="#work-with-data" aria-hidden="true">#</a> work with data</h2><p>enum</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Direction</span><span class="token punctuation">{</span>\n    <span class="token class-name">Up</span><span class="token punctuation">,</span><span class="token class-name">Down</span><span class="token punctuation">,</span><span class="token class-name">Left</span><span class="token punctuation">,</span><span class="token class-name">Right</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">which_way</span><span class="token punctuation">(</span>go<span class="token punctuation">:</span> <span class="token class-name">Direction</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">match</span> go<span class="token punctuation">{</span>\n        <span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Up</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Down</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;down&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Left</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Right</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">which_way</span><span class="token punctuation">(</span><span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">which_way</span><span class="token punctuation">(</span><span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">which_way</span><span class="token punctuation">(</span><span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Up</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">which_way</span><span class="token punctuation">(</span><span class="token class-name">Direction</span><span class="token punctuation">::</span><span class="token class-name">Down</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>struct</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">GroceryItem</span> <span class="token punctuation">{</span>\n        stock<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">,</span>\n        price<span class="token punctuation">:</span><span class="token keyword">f64</span><span class="token punctuation">,</span>            \n<span class="token punctuation">}</span> \n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> cereal <span class="token operator">=</span> <span class="token class-name">GroceryItem</span> <span class="token punctuation">{</span>\n        stock<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>\n        price<span class="token punctuation">:</span><span class="token number">1.22</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;stock:{:?}&quot;</span><span class="token punctuation">,</span>cereal<span class="token punctuation">.</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price:{:?}&quot;</span><span class="token punctuation">,</span>cereal<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>引用结构体成员给其他变量赋值时，要注意：所有权的转移可能会破坏结构体变量的完整性。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code> <span class="token function">print_fn</span><span class="token punctuation">(</span>dr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token operator">|</span>              <span class="token operator">-</span><span class="token operator">-</span> value moved here\n<span class="token number">26</span> <span class="token operator">|</span>     <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>dr<span class="token punctuation">.</span>fluid_oz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token operator">|</span>                     <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> value borrowed here after <span class="token keyword">move</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Flavor</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Spark</span><span class="token punctuation">,</span>\n    <span class="token class-name">Sweet</span><span class="token punctuation">,</span>\n    <span class="token class-name">Fruity</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token type-definition class-name">drink</span> <span class="token punctuation">{</span>\n    flavor<span class="token punctuation">:</span><span class="token class-name">Flavor</span><span class="token punctuation">,</span>\n    fluid_oz<span class="token punctuation">:</span><span class="token keyword">f64</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">print_fn</span><span class="token punctuation">(</span>dr<span class="token punctuation">:</span>drink<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">match</span> dr<span class="token punctuation">.</span>flavor<span class="token punctuation">{</span>\n        <span class="token class-name">Flavor</span><span class="token punctuation">::</span><span class="token class-name">Spark</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;spark&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Flavor</span><span class="token punctuation">::</span><span class="token class-name">Fruity</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;fruity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Flavor</span><span class="token punctuation">::</span><span class="token class-name">Sweet</span><span class="token operator">=&gt;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Sweet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>dr<span class="token punctuation">.</span>fluid_oz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> dr <span class="token operator">=</span> drink<span class="token punctuation">{</span>\n        flavor<span class="token punctuation">:</span><span class="token class-name">Flavor</span><span class="token punctuation">::</span><span class="token class-name">Spark</span><span class="token punctuation">,</span>\n        fluid_oz<span class="token punctuation">:</span><span class="token number">1.5</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> cl <span class="token operator">=</span> dr<span class="token punctuation">.</span>fluid_oz<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">print_fn</span><span class="token punctuation">(</span>dr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  \n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>tuples</p>',40),t={},e=(0,a(83744).Z)(t,[["render",function(n,s){return p}]])},83744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);